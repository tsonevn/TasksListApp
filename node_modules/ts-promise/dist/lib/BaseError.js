/**
 * Base class for custom errors.
 *
 * Copyright (C) 2015 Martin Poelstra
 * License: MIT
 */
"use strict";
var hasStacks = (typeof Error.captureStackTrace === "function");
var BaseError = (function () {
    function BaseError(name, message) {
        this.name = name;
        this.message = message;
        /* istanbul ignore else */ // TODO: remove when testing for non-V8
        if (hasStacks) {
            Error.captureStackTrace(this, this.constructor);
        }
        else {
            this.stack = "dummy\n<no trace>";
        }
    }
    return BaseError;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = BaseError;
// Make BaseError 'extend' Error, not just 'implement' Error
// Because Error is defined in Typescript's lib.d.ts as an interface instead of
// a class, we can't 'normally' extend it.
BaseError.prototype = Object.create(Error.prototype);
//# sourceMappingURL=BaseError.js.map